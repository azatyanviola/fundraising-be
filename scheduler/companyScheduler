const express = require('express');
const http = require('http');
const cookieParser = require('cookie-parser');
const cron = require('node-cron');
const People = require('../schema/people');
const Company = require('../schema/company');
const airtable = require('airtable');
require('dotenv').config();
const mongoose = require('mongoose');
const {
    companyDataMerge,
    peopleDataMerge
} = require('../heplers/dataMerge');

const PORT = 3001;
const app = express();
const server = http.createServer(app);



(async () => {
    await mongoose.connect(process.env.DB_URL);
      console.log('success');
    await server.listen(PORT, () => {
      console.log(`Server started `);
  });
})();


const base = new airtable({ apiKey: process.env.AIRTABLE_API_KEY }).base(process.env.AIRTABLE_BASE_ID);



app.get('/airtable_people', async (req, res) => {
    try {
        base('People').select({
            view: "Grid view"
        }).eachPage(function page(records) {
            records.forEach(async (record) => {
                const { personName, position, personLinkedIn, personEmail, personTwitter, RecordId } = record.fields;
                let dbData = await People.findOne({ personName });
                if (dbData) {
                    let update = peopleDataMerge({
                        airtableData: record.fields,
                        dbData
                    })
                    if (Object.keys(update).length) {
                        let res = await People.updateOne({
                            id: dbData.id,
                        }, update);
                    }
                } else {
                    let newPeople = await People.create({
                        personName,
                        position,
                        personLinkedIn,
                        personEmail,
                        personTwitter,
                        RecordId
                    });
                }
            });
        });
        return res.send({ message: 'The data successfully saved' });
    }
    catch (err) {
      return res.send({ message: 'The internal server error' });
    }
 });






app.get('/airtable_company', async (req, res) => {
        try {
            base('Companies').select({
                view: "Grid view"
            }).eachPage(function page(records) {
                records.forEach(async (record) => {
                    let dbData = await Company.findOne({ name: record.fields.name });
                    if (dbData) {
                        let update = companyDataMerge({
                            airtableData: record.fields,
                            dbData
                        })
                        if (Object.keys(update).length) {
                            Company.updateOne({
                                id: dbData.id,
                            }, update);
                        }
                    } else {
                        const {
                            name,
                            country,
                            type,
                            industry,
                            stage,
                            location,
                            ticketSize,
                            range,
                            headquarter,
                            website,
                            twitter,
                            fasebook,
                            linkedIn,
                            crunchbase,
                            instagram,
                            youtube,
                            mail,
                            medium,
                            about,
                            logoUrl,
                            recordID,
                            peopleRecordId,
                            created
                        } = record.fields;
    
                        let newCompany = await Company.create({
                            name,
                            country,
                            type,
                            industry,
                            stage,
                            location,
                            ticketSize,
                            range,
                            headquarter,
                            website,
                            twitter,
                            fasebook,
                            linkedIn,
                            crunchbase,
                            instagram,
                            youtube,
                            mail,
                            medium,
                            about,
                            logoUrl,
                            recordID,
                            peopleRecordId,
                            created
                        });
                    }
                });
    
            });
              return res.send({ message: 'The data successfully saved' });
        }
        catch (err) {
            return res.send({ message: 'The internal server error' });
        }
    });



//   (async () => {
//     let queryObject = [
//         {
//            $lookup:
//               {
//                  from: "People",
//                  localField: "peopleRecordId",
//                  foreignField: "RecordId",
//                  as: "people"
//              }
//         }
                   
//      ];

//     let db = await Company.aggregate(queryObject);
//     console.log(db);
// })();




// // lookup query
// const aggregator =  async (req, res) => {
//   try {
//     let queryObject = [
//         {
//            $lookup:
//               {
//                  from: "People",
//                  localField: "peopleRecordId",
//                  foreignField: "RecordId",
//                  as: "people"
//              }
//         }
                   
//      ];

//      let db = await Company.aggregate(queryObject);
//      console.log(db);
//     return res.json({ ...db });
//   } catch (error) {
//     return res.json({ error });
//   }
// } 
   

